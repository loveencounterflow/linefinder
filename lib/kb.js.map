{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/kb.coffee"
  ],
  "names": [],
  "mappings": "AAI4G;EAAA;;;EAC5G;AAD4G,MAAA;;EAE5G,CAAA,GAAI,OAAA,CAAQ,QAAR,EAFwG;;;;;EAQtG,IAAC,CAAA;;;IAAP,MAAA,GAAA,CAAA;;;;;;MAwDE,6BAA+B,CAAA,CAAA;AACjC,YAAA,aAAA,EAAA,WAAA,EAAA,CAAA,EAAA,GAAA,EAAA,aAAA,EAAA,KAAA;;;QAEI,aAAA,GAAoB;UAAE,KAAA,EAAO,KAAK,CAAC;QAAf;QACpB,WAAA,GAAoB;QACpB,KAAA,gDAAA;;UACE,KAAA,GAAkC,KAAK,CAAC,gBAAN,CAAuB,aAAvB;UAClC,WAAA,GAAkC,WAAA,IAAe,CAAE,aAAa,CAAE,aAAF,CAAb,KAAoC,KAAtC;UACjD,aAAa,CAAE,aAAF,CAAb,GAAkC;QAHpC;QAIA,IAAG,WAAH;AACE,iBAAO,aAAA,GAAgB,MAAM,CAAC,MAAP,CAAc,aAAd,EADzB;;AAEA,eAAO;MAXsB,CAtDjC;;;MAoEE,mBAAqB,CAAE,KAAF,CAAA;AACvB,YAAA;QAAI,cAAA,GAAiB,IAAC,CAAA,6BAAD,CAA+B,KAA/B;QACjB,IAAK,cAAA,KAAkB,IAAvB;UACE,CAAC,CAAC,GAAG,CAAC,iBAAN,CAAwB,0BAAxB,EAAoD;YAAE,MAAA,EAAQ;UAAV,CAApD,EADF;;eAEA,YAAA,CAAa,KAAK,CAAC,gBAAN,CAAuB,UAAvB,CAAb;MAJmB,CApEvB;;;;;;;;;;MAkFE,YAAc,CAAE,KAAF,CAAA,EAAA;;QAEZ,IAAK,KAAL;UACE,CAAC,CAAC,GAAG,CAAC,iBAAN,CAAwB,uBAAxB;UACA,iBAAA,GAAoB,KAFtB;SAAA,MAAA;UAIE,CAAC,CAAC,GAAG,CAAC,iBAAN,CAAwB,wBAAxB;UACA,iBAAA,GAAoB,MALtB;;AAMA,eAAO;MARK,CAlFhB;;;MA6FE,mBAAqB,CAAA,CAAA;AACvB,YAAA,UAAA,EAAA,CAAA,EAAA;QAAI,KAAA,mDAAA;;UACE,CAAC,CAAC,GAAG,CAAC,EAAN,CAAS,QAAT,EAAmB,UAAnB,EAA+B,mBAA/B;QADF,CAAJ;;QAGI,CAAC,CAAC,GAAG,CAAC,EAAN,CAAS,QAAT,EAAmB,SAAnB,EAA8B,QAAA,CAAE,KAAF,CAAA,EAAA;;UAE5B,IAAK,KAAK,CAAC,GAAN,KAAa,UAAlB;YAAoC,YAAA,CAAa,CAAI,iBAAjB,EAApC;WAAA,MAAA;YACoC,YAAA,CAAa,KAAK,CAAC,gBAAN,CAAuB,UAAvB,CAAb,EADpC;;AAEA,iBAAO;QAJqB,CAA9B,EAHJ;;QASI,CAAC,CAAC,GAAG,CAAC,EAAN,CAAS,QAAT,EAAmB,OAAnB,EAA4B,QAAA,CAAE,KAAF,CAAA;UAE1B,IAAe,KAAK,CAAC,GAAN,KAAa,UAA5B;;AAAA,mBAAO,KAAP;;UACA,YAAA,CAAa,KAAK,CAAC,gBAAN,CAAuB,UAAvB,CAAb;AACA,iBAAO;QAJmB,CAA5B;AAKA,eAAO;MAfY;;IA/FvB;;;iBAGE,iBAAA,GAAmB;;MAEjB,OAFiB;;;;;MAOjB,OAPiB;MAQjB,aARiB;MASjB,YATiB;MAUjB,aAViB;;;;;;;;;iBAkBnB,cAAA,GAAgB,CAEd,KAFc,EAGd,UAHc,EAId,SAJc,EAKd,MALc,EAMd,OANc;;;;;;;;;;;;;;;iBAsBhB,aAAA,GAAe,CAAA;;IACf,KAAA,+BAAA;MACE,aAAa,CAAE,aAAF,CAAb,GAAiC;IADnC;;IAEA,MAAM,CAAC,MAAP,CAAe,aAAf;;;IAGA,iBAAA,GAAoB;;;;;AAzDsF",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\n'use strict'\nµ = require './main'\n\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass @Kb\n\n  #---------------------------------------------------------------------------------------------------------\n  kblike_eventnames: [\n    # ### TAINT not all of these events are needed\n    'click',\n    # 'dblclick', # implied / preceded by `click` event\n    # 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart',\n    # 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup',\n    # 'pointercancel',\n    'wheel',\n    'pointermove',\n    'pointerout',\n    'pointerover',\n    # 'pointerdown',\n    # 'pointerenter',\n    # 'pointerleave',\n    # 'pointerup',\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  modifier_names: [\n    # ------------- Tier A: ubiquitous, unequivocal\n    'Alt',\n    'AltGraph',\n    'Control',\n    'Meta',\n    'Shift',\n    # ------------- Tier B: status doubtful\n    # 'Hyper',\n    # 'OS',\n    # 'Super',\n    # 'Symbol',\n    # ------------- Tier C: rare, not needed, or not sensed by JS\n    # 'Fn',\n    # 'CapsLock',\n    # 'FnLock',\n    # 'NumLock',\n    # 'ScrollLock',\n    # 'SymbolLock',\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  prv_modifiers: {}\n  for modifier_name of modifier_names\n    prv_modifiers[ modifier_name ] = null\n  Object.freeze( prv_modifiers )\n\n  #---------------------------------------------------------------------------------------------------------\n  caps_lock_pressed = false\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Get the last known keyboard modifier state. NOTE may be extended with `event` argument ITF. ###\n  # µ.DOM.get_kb_modifier_state = () -> return { ...prv, }\n\n  #---------------------------------------------------------------------------------------------------------\n  get_changed_kb_modifier_state: () ->\n    ### Return keyboard modifier state if it has changed since the last call, or `null` if it hasn't changed. ###\n    # log( '^33988^', { event, } )\n    crt_modifiers     = { _type: event.type, }\n    has_changed       = false\n    for modifier_name in modifier_names\n      state                           = event.getModifierState modifier_name\n      has_changed                     = has_changed or ( prv_modifiers[ modifier_name ] isnt state )\n      crt_modifiers[ modifier_name ]  = state\n    if has_changed\n      return prv_modifiers = Object.freeze crt_modifiers\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  handle_kblike_event: ( event ) ->\n    modifier_state = @get_changed_kb_modifier_state event\n    if ( modifier_state != null )\n      µ.DOM.emit_custom_event 'mkts_kb_modifier_changed', { detail: modifier_state, }\n    _set_verdict event.getModifierState 'CapsLock'\n\n#-----------------------------------------------------------------------------------------------------------\n# get_kb_modifier_state = ( event, value ) ->\n#   prv_modifiers = {}\n#   for ( modifier_name of modifier_names ) {\n#     prv_modifiers[ modifier_name ] = null\n#   Object.freeze( prv_modifiers )\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_verdict: ( value ) ->\n    # console.log('^22928^', µ.DOM.get_kb_modifier_state() )\n    if ( value )\n      µ.DOM.emit_custom_event 'mkts_capslock_pressed'\n      caps_lock_pressed = true\n    else\n      µ.DOM.emit_custom_event 'mkts_capslock_released'\n      caps_lock_pressed = false\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  XXXXXXXXXXXX_foobar: ->\n    for event_name in kblike_eventnames\n      µ.DOM.on document, event_name, handle_kblike_event\n    #.......................................................................................................\n    µ.DOM.on document, 'keydown', ( event ) ->\n      ### TAINT logic is questionable ###\n      if ( event.key is 'CapsLock' ) then _set_verdict not caps_lock_pressed\n      else                                _set_verdict event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    µ.DOM.on document, 'keyup', ( event ) ->\n      ### TAINT logic is questionable ###\n      return null if event.key is 'CapsLock'\n      _set_verdict event.getModifierState 'CapsLock'\n      return null\n    return null\n\n\n\n"
  ]
}