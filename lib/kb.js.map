{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/kb.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\n'use strict'\nµ                         = require './main'\nlog                       = console.log\ndebug                     = console.debug\nfreeze                    = Object.freeze\n#-----------------------------------------------------------------------------------------------------------\ndefaults                  =\n\n  #---------------------------------------------------------------------------------------------------------\n  kblike_eventnames: [\n    # ### TAINT not all of these events are needed\n    'click',\n    # 'dblclick', # implied / preceded by `click` event\n    # 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart',\n    # 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup',\n    # 'pointercancel',\n    'wheel',\n    'pointermove',\n    'pointerout',\n    'pointerover',\n    # 'pointerdown',\n    # 'pointerenter',\n    # 'pointerleave',\n    # 'pointerup',\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  modifier_names: [\n    # ------------- Tier A: ubiquitous, unequivocal\n    'Alt',\n    'AltGraph',\n    'Control',\n    'Meta',\n    'Shift',\n    # ------------- Tier B: status doubtful\n    # 'Hyper',\n    # 'OS',\n    # 'Super',\n    # 'Symbol',\n    # ------------- Tier C: rare, not needed, or not sensed by JS\n    # 'Fn',\n    # 'CapsLock',\n    # 'FnLock',\n    # 'NumLock',\n    # 'ScrollLock',\n    # 'SymbolLock',\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass @Kb\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = { defaults..., cfg..., }\n    for modifier_name in @cfg.modifier_names\n      @_prv_modifiers[ modifier_name ] = null\n    freeze( @_prv_modifiers )\n    return null\n\n  _prv_modifiers: {}\n  _caps_lock_pressed: false\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Get the last known keyboard modifier state. NOTE may be extended with `event` argument ITF. ###\n  # µ.DOM.get_kb_modifier_state = () => return { ...prv, }\n\n  #---------------------------------------------------------------------------------------------------------\n  get_changed_kb_modifier_state: () =>\n    ### Return keyboard modifier state if it has changed since the last call, or `null` if it hasn't changed. ###\n    # log( '^33988^', { event, } )\n    crt_modifiers     = { _type: event.type, }\n    has_changed       = false\n    for modifier_name in @cfg.modifier_names\n      state                           = event.getModifierState modifier_name\n      has_changed                     = has_changed or ( @_prv_modifiers[ modifier_name ] isnt state )\n      crt_modifiers[ modifier_name ]  = state\n    return @_prv_modifiers = freeze crt_modifiers if has_changed\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n# get_kb_modifier_state = ( event, value ) =>\n#   @_prv_modifiers = {}\n#   for ( modifier_name of @cfg.modifier_names ) {\n#     @_prv_modifiers[ modifier_name ] = null\n#   freeze( @_prv_modifiers )\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_verdict: ( value ) =>\n    # console.log('^22928^', µ.DOM.get_kb_modifier_state() )\n    if ( value )\n      µ.DOM.emit_custom_event 'µ_kb_capslock_active'\n      @_caps_lock_pressed = true\n    else\n      µ.DOM.emit_custom_event 'µ_kb_capslock_inactive'\n      @_caps_lock_pressed = false\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  XXXXXXXXXXXX_foobar: =>\n    #.......................................................................................................\n    handle_kblike_event = ( event ) =>\n      modifier_state = @get_changed_kb_modifier_state event\n      debug '^2287001^', { modifier_state, }\n      if ( modifier_state != null )\n        µ.DOM.emit_custom_event 'µ_kb_modifier_changed', { detail: modifier_state, }\n      @_set_verdict event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    for event_name in @cfg.kblike_eventnames\n      µ.DOM.on document, event_name, handle_kblike_event\n    #.......................................................................................................\n    µ.DOM.on document, 'keydown', ( event ) =>\n      ### TAINT logic is questionable ###\n      if ( event.key is 'CapsLock' ) then @_set_verdict not @_caps_lock_pressed\n      else                                @_set_verdict event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    µ.DOM.on document, 'keyup', ( event ) =>\n      ### TAINT logic is questionable ###\n      return null if event.key is 'CapsLock'\n      @_set_verdict event.getModifierState 'CapsLock'\n      return null\n    return null\n\n\n\n"
  ]
}