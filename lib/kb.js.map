{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/kb.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\n'use strict'\nÂµ                         = require './main'\nlog                       = console.log\ndebug                     = console.debug\nfreeze                    = Object.freeze\n{ types\n  isa\n  validate\n  validate_optional }     = require './types'\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults                  =\n\n  #---------------------------------------------------------------------------------------------------------\n  latch:\n    dt:     350 # time in milliseconds between first and last key event to trigger latching\n\n  #---------------------------------------------------------------------------------------------------------\n  kblike_eventnames: [\n    # ### TAINT not all of these events are needed\n    'click',\n    # 'dblclick', # implied / preceded by `click` event\n    # 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart',\n    # 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup',\n    # 'pointercancel',\n    'wheel',\n    'pointermove',\n    'pointerout',\n    'pointerover',\n    # 'pointerdown',\n    # 'pointerenter',\n    # 'pointerleave',\n    # 'pointerup',\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  modifier_names: [\n    # ------------- Tier A: ubiquitous, unequivocal\n    'Alt',\n    'AltGraph',\n    'Control',\n    'Meta',\n    'Shift',\n    'CapsLock',\n    # ------------- Tier B: status doubtful\n    # 'Hyper',\n    # 'OS',\n    # 'Super',\n    # 'Symbol',\n    # ------------- Tier C: rare, not needed, or not sensed by JS\n    # 'Fn',\n    # 'FnLock',\n    # 'NumLock',\n    # 'ScrollLock',\n    # 'SymbolLock',\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass @Kb\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = { defaults..., cfg..., }\n    for modifier_name in @cfg.modifier_names\n      @_prv_modifiers[ modifier_name ] = null\n    freeze( @_prv_modifiers )\n    return null\n\n  _prv_modifiers: {}\n  _capslock_active: false\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Get the last known keyboard modifier state. NOTE may be extended with `event` argument ITF. ###\n  # Âµ.DOM.get_kb_modifier_state = () => return { ...prv, }\n\n  #---------------------------------------------------------------------------------------------------------\n  get_changed_kb_modifier_state: () =>\n    ### Return keyboard modifier state if it has changed since the last call, or `null` if it hasn't changed. ###\n    # log( '^33988^', { event, } )\n    crt_modifiers     = { _type: event.type, }\n    has_changed       = false\n    for modifier_name in @cfg.modifier_names\n      state                           = event.getModifierState modifier_name\n      has_changed                     = has_changed or ( @_prv_modifiers[ modifier_name ] isnt state )\n      crt_modifiers[ modifier_name ]  = state\n    return @_prv_modifiers = freeze crt_modifiers if has_changed\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n# get_kb_modifier_state = ( event, value ) =>\n#   @_prv_modifiers = {}\n#   for ( modifier_name of @cfg.modifier_names ) {\n#     @_prv_modifiers[ modifier_name ] = null\n#   freeze( @_prv_modifiers )\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_capslock_state: ( capslock_active ) =>\n    return null if capslock_active is @_capslock_active\n    @_capslock_active = capslock_active\n    Âµ.DOM.emit_custom_event 'Âµ_kb_capslock_changed', { detail: { CapsLock: capslock_active, }, }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # on_push: ( keynames, handler ) =>\n    # keynames  = [ keynames, ] unless isa.list keynames\n    # types     = [ types,    ] unless isa.list types\n    # validate.keywatch_keynames  keynames\n    # validate.keywatch_types     types\n\n  #---------------------------------------------------------------------------------------------------------\n  XXXXXXXXXXXX_foobar: =>\n    #.......................................................................................................\n    handle_kblike_event = ( event ) =>\n      modifier_state = @get_changed_kb_modifier_state event\n      if ( modifier_state != null )\n        Âµ.DOM.emit_custom_event 'Âµ_kb_modifier_changed', { detail: modifier_state, }\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    for event_name in @cfg.kblike_eventnames\n      Âµ.DOM.on document, event_name, handle_kblike_event\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keydown', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      if ( event.key is 'CapsLock' ) then @_set_capslock_state not @_capslock_active\n      else                                @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keyup', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      return null if event.key is 'CapsLock'\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    return null\n\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n\n  #---------------------------------------------------------------------------------------------------------\n  _registry:          {}\n  _initialized_types: {}\n  _shreg:             []\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_double_key: ->\n    return null unless ( Date.now() - ( @_shreg[ 0 ]?.t ? 0 ) ) < @cfg.latch.dt\n    return null unless @_shreg[ 0 ]?.dir   is 'down'\n    return null unless @_shreg[ 1 ]?.dir   is 'up'\n    return null unless @_shreg[ 2 ]?.dir   is 'down'\n    return null unless @_shreg[ 3 ]?.dir   is 'up'\n    return null unless @_shreg[ 0 ]?.name  is @_shreg[ 1 ]?.name is @_shreg[ 2 ]?.name is @_shreg[ 3 ]?.name\n    R               = @_shreg[ 3 ].name\n    @_shreg.length  = 0\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _detect_latch_events: ( callback ) ->\n    shift   = -> @_shreg.shift()\n    push    = ( dir, event ) =>\n      name = event.key\n      @_shreg.push { dir, name, t: Date.now(), }\n      @_shreg.shift() while @_shreg.length > 4\n      if name == @_get_double_key @_shreg\n        callback event\n      return null\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keydown', ( event ) => push 'down', event\n    Âµ.DOM.on document, 'keyup',   ( event ) => push 'up',   event\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _detect_tlatch_events: ( name, callback ) =>\n    debug '^339^', name\n    entry     = @_registry[ name ] ?= {}\n    state     = entry.state        ?= {}\n    Âµ.DOM.on document, 'keydown', ( event ) =>\n      state.tlatch = not state.latch\n      debug '^4455-keydown^', name, state\n      callback event\n    Âµ.DOM.on document, 'keyup',   ( event ) =>\n      state.tlatch =     state.latch\n      debug '^4455-keyup^', name, state\n      callback event\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_key: ( name, behavior, handler ) =>\n    ### NOTE catch-all bindings to be implemented later ###\n    ### NOTE allowing for `'Space'` as alias for `' '` ###\n    name      = ' ' if name is 'Space'\n    validate.keywatch_keyname name\n    validate.keywatch_keytype behavior\n    entry     = @_registry[ name ] ?= {}\n    state     = entry.state        ?= {}\n    handlers  = entry[ behavior  ] ?= []\n    handlers.push handler\n    debug '^_listen_to_key@1112^', { name, behavior, }\n    @_add_listener_for_behavior behavior, name\n    #.......................................................................................................\n    return null ### NOTE may return a `remove_listener` method ITF ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _call_handlers: ( behavior, event ) =>\n    name      = event.key\n    entry     = @_registry[ name  ]; return null unless entry?\n    handlers  = entry[ behavior   ]; return null unless handlers?\n    state     = entry.state\n    switch behavior\n      when 'up'     then state.up     = true;   state.down = false\n      when 'down'   then state.up     = false;  state.down = true\n      when 'latch'  then state.latch  = not state.latch\n      when 'toggle'\n        toggle  = ( state.toggle ?= false )\n        if ( event.type is 'keydown' ) and ( toggle is false )\n          state.toggle      = true\n          entry.skip_next_keyup   = true\n        else if ( event.type is 'keyup' ) and ( toggle is true )\n          if entry.skip_next_keyup then entry.skip_next_keyup = false\n          else                          state.toggle          = false\n    #.......................................................................................................\n    state     = freeze { state..., }\n    d         = freeze { name, behavior, state, event, }\n    ### TAINT also call catchall handlers ###\n    ### TAINT consider to use method to retrieve handlers ###\n    handler d for handler in handlers\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_listener_for_behavior: ( behavior, keyname ) ->\n    return null if @_initialized_types[ behavior ]\n    @_initialized_types[ behavior ] = true\n    #.......................................................................................................\n    switch behavior\n      when 'up', 'down'\n        event_name = \"key#{behavior}\"\n        Âµ.DOM.on document, event_name,  ( event ) => @_call_handlers behavior, event\n      when 'latch'\n        @_detect_latch_events           ( event ) => @_call_handlers behavior, event\n      when 'tlatch'\n        @_detect_tlatch_events keyname, ( event ) => @_call_handlers behavior, event\n      when 'toggle'\n        Âµ.DOM.on document, 'keyup',     ( event ) => @_call_handlers behavior, event\n        Âµ.DOM.on document, 'keydown',   ( event ) => @_call_handlers behavior, event\n      else\n        Âµ.DOM.warn \"^4453^ unknown key event behavior: #{Âµ.TEXT.rpr behavior}\"\n    return null ### NOTE may return a `remove_listener` method ITF ###\n\n"
  ]
}