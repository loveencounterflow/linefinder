{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/kb.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\n'use strict'\nµ                         = require './main'\nlog                       = console.log\ndebug                     = console.debug\nfreeze                    = Object.freeze\n{ types\n  isa\n  validate\n  validate_optional }     = require './types'\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults                  =\n\n  #---------------------------------------------------------------------------------------------------------\n  kblike_eventnames: [\n    # ### TAINT not all of these events are needed\n    'click',\n    # 'dblclick', # implied / preceded by `click` event\n    # 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart',\n    # 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup',\n    # 'pointercancel',\n    'wheel',\n    'pointermove',\n    'pointerout',\n    'pointerover',\n    # 'pointerdown',\n    # 'pointerenter',\n    # 'pointerleave',\n    # 'pointerup',\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  modifier_names: [\n    # ------------- Tier A: ubiquitous, unequivocal\n    'Alt',\n    'AltGraph',\n    'Control',\n    'Meta',\n    'Shift',\n    'CapsLock',\n    # ------------- Tier B: status doubtful\n    # 'Hyper',\n    # 'OS',\n    # 'Super',\n    # 'Symbol',\n    # ------------- Tier C: rare, not needed, or not sensed by JS\n    # 'Fn',\n    # 'FnLock',\n    # 'NumLock',\n    # 'ScrollLock',\n    # 'SymbolLock',\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass @Kb\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = { defaults..., cfg..., }\n    for modifier_name in @cfg.modifier_names\n      @_prv_modifiers[ modifier_name ] = null\n    freeze( @_prv_modifiers )\n    return null\n\n  _prv_modifiers: {}\n  _capslock_active: false\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Get the last known keyboard modifier state. NOTE may be extended with `event` argument ITF. ###\n  # µ.DOM.get_kb_modifier_state = () => return { ...prv, }\n\n  #---------------------------------------------------------------------------------------------------------\n  get_changed_kb_modifier_state: () =>\n    ### Return keyboard modifier state if it has changed since the last call, or `null` if it hasn't changed. ###\n    # log( '^33988^', { event, } )\n    crt_modifiers     = { _type: event.type, }\n    has_changed       = false\n    for modifier_name in @cfg.modifier_names\n      state                           = event.getModifierState modifier_name\n      has_changed                     = has_changed or ( @_prv_modifiers[ modifier_name ] isnt state )\n      crt_modifiers[ modifier_name ]  = state\n    return @_prv_modifiers = freeze crt_modifiers if has_changed\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n# get_kb_modifier_state = ( event, value ) =>\n#   @_prv_modifiers = {}\n#   for ( modifier_name of @cfg.modifier_names ) {\n#     @_prv_modifiers[ modifier_name ] = null\n#   freeze( @_prv_modifiers )\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_capslock_state: ( capslock_active ) =>\n    return null if capslock_active is @_capslock_active\n    @_capslock_active = capslock_active\n    µ.DOM.emit_custom_event 'µ_kb_capslock_changed', { detail: { CapsLock: capslock_active, }, }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # on_push: ( keynames, handler ) =>\n    # keynames  = [ keynames, ] unless isa.list keynames\n    # types     = [ types,    ] unless isa.list types\n    # validate.keywatch_keynames  keynames\n    # validate.keywatch_types     types\n\n  #---------------------------------------------------------------------------------------------------------\n  XXXXXXXXXXXX_foobar: =>\n    #.......................................................................................................\n    handle_kblike_event = ( event ) =>\n      modifier_state = @get_changed_kb_modifier_state event\n      if ( modifier_state != null )\n        µ.DOM.emit_custom_event 'µ_kb_modifier_changed', { detail: modifier_state, }\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    for event_name in @cfg.kblike_eventnames\n      µ.DOM.on document, event_name, handle_kblike_event\n    #.......................................................................................................\n    µ.DOM.on document, 'keydown', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      if ( event.key is 'CapsLock' ) then @_set_capslock_state not @_capslock_active\n      else                                @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    µ.DOM.on document, 'keyup', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      return null if event.key is 'CapsLock'\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    return null\n\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n\n  #---------------------------------------------------------------------------------------------------------\n  _registry:          {}\n  _initialized_types: {}\n\n  #---------------------------------------------------------------------------------------------------------\n  # µ_DOM_detect_doublekey_events { event_name: 'µKB_doublekey', dt: 350, }\n  _detect_doublekey_events: ( cfg, handler ) =>\n    defaults  = { dt: 350, }\n    cfg       = { defaults..., cfg..., }\n    shreg     = []\n    #.......................................................................................................\n    get_double_key = ->\n      return false unless ( Date.now() - ( shreg[ 0 ]?.t ? 0 ) ) < cfg.dt\n      return false unless shreg[ 0 ]?.dir   is 'down'\n      return false unless shreg[ 1 ]?.dir   is 'up'\n      return false unless shreg[ 2 ]?.dir   is 'down'\n      return false unless shreg[ 3 ]?.dir   is 'up'\n      return false unless shreg[ 0 ]?.name  is shreg[ 1 ]?.name is shreg[ 2 ]?.name is shreg[ 3 ]?.name\n      R             = shreg[ 3 ].name\n      shreg.length  = 0\n      return R\n    #.......................................................................................................\n    shift = -> shreg.shift()\n    push = ( dir, event ) ->\n      name = event.key\n      shreg.push { dir, name, t: Date.now(), }\n      shreg.shift() while shreg.length > 4\n      if name = get_double_key()\n        handler event\n      return null\n    #.......................................................................................................\n    µ.DOM.on document, 'keydown', ( event ) => push 'down', event\n    µ.DOM.on document, 'keyup',   ( event ) => push 'up',   event\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_key: ( name, type, handler ) =>\n    ### NOTE catch-all bindings to be implemented later ###\n    # if name? then validate.keywatch_keyname name else name = ''\n    # if type? then validate.keywatch_keytype type else type = ''\n    validate.keywatch_keyname name\n    validate.keywatch_keytype type\n    tag       = \"#{type}:#{name}\"\n    handlers  = @_registry[ tag ] ?= []\n    handlers.push handler\n    @_add_listener_for_type type\n    #.......................................................................................................\n    return null ### NOTE may return a `remove_listener` method ITF ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _call_handlers: ( type, event ) =>\n    name  = event.key\n    d     = freeze { name, type, event, }\n    ### TAINT avoid to iterate over tags like `':'`, `'down:'` if they are known not to be used ###\n    # for tag in [ \"#{type}:#{name}\", \"#{type}:\", \":#{event.key}\", \":\", ]\n    for tag in [ \"#{type}:#{event.key}\", ]\n      continue unless ( handlers = @_registry[ tag ] )?\n      handler d for handler in handlers\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_listener_for_type: ( type ) ->\n    return null if @_initialized_types[ type ]\n    @_initialized_types[ type ] = true\n    debug '^2252^', \"binding type #{type}\"\n    #.......................................................................................................\n    switch type\n      when 'up', 'down'\n        event_name = \"key#{type}\"\n        µ.DOM.on document, event_name, ( event ) => @_call_handlers type, event\n      when 'double'\n        @_detect_doublekey_events null, ( event ) => @_call_handlers type, event\n      else\n        µ.DOM.warn \"^4453^ unknown key event type: #{µ.TEXT.rpr type}\"\n    return null ### NOTE may return a `remove_listener` method ITF ###\n\n"
  ]
}