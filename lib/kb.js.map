{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/kb.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\n'use strict'\nµ                         = require './main'\nlog                       = console.log\ndebug                     = console.debug\nfreeze                    = Object.freeze\n{ types\n  isa\n  validate\n  validate_optional }     = require './types'\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults                  =\n\n  #---------------------------------------------------------------------------------------------------------\n  kblike_eventnames: [\n    # ### TAINT not all of these events are needed\n    'click',\n    # 'dblclick', # implied / preceded by `click` event\n    # 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart',\n    # 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup',\n    # 'pointercancel',\n    'wheel',\n    'pointermove',\n    'pointerout',\n    'pointerover',\n    # 'pointerdown',\n    # 'pointerenter',\n    # 'pointerleave',\n    # 'pointerup',\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  modifier_names: [\n    # ------------- Tier A: ubiquitous, unequivocal\n    'Alt',\n    'AltGraph',\n    'Control',\n    'Meta',\n    'Shift',\n    'CapsLock',\n    # ------------- Tier B: status doubtful\n    # 'Hyper',\n    # 'OS',\n    # 'Super',\n    # 'Symbol',\n    # ------------- Tier C: rare, not needed, or not sensed by JS\n    # 'Fn',\n    # 'FnLock',\n    # 'NumLock',\n    # 'ScrollLock',\n    # 'SymbolLock',\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass @Kb\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = { defaults..., cfg..., }\n    for modifier_name in @cfg.modifier_names\n      @_prv_modifiers[ modifier_name ] = null\n    freeze( @_prv_modifiers )\n    return null\n\n  _prv_modifiers: {}\n  _capslock_active: false\n\n  #---------------------------------------------------------------------------------------------------------\n  @_registry: null\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Get the last known keyboard modifier state. NOTE may be extended with `event` argument ITF. ###\n  # µ.DOM.get_kb_modifier_state = () => return { ...prv, }\n\n  #---------------------------------------------------------------------------------------------------------\n  get_changed_kb_modifier_state: () =>\n    ### Return keyboard modifier state if it has changed since the last call, or `null` if it hasn't changed. ###\n    # log( '^33988^', { event, } )\n    crt_modifiers     = { _type: event.type, }\n    has_changed       = false\n    for modifier_name in @cfg.modifier_names\n      state                           = event.getModifierState modifier_name\n      has_changed                     = has_changed or ( @_prv_modifiers[ modifier_name ] isnt state )\n      crt_modifiers[ modifier_name ]  = state\n    return @_prv_modifiers = freeze crt_modifiers if has_changed\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n# get_kb_modifier_state = ( event, value ) =>\n#   @_prv_modifiers = {}\n#   for ( modifier_name of @cfg.modifier_names ) {\n#     @_prv_modifiers[ modifier_name ] = null\n#   freeze( @_prv_modifiers )\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_capslock_state: ( capslock_active ) =>\n    return null if capslock_active is @_capslock_active\n    @_capslock_active = capslock_active\n    µ.DOM.emit_custom_event 'µ_kb_capslock_changed', { detail: { CapsLock: capslock_active, }, }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # on_push: ( keynames, handler ) =>\n    # keynames  = [ keynames, ] unless isa.list keynames\n    # types     = [ types,    ] unless isa.list types\n    # validate.keywatch_keynames  keynames\n    # validate.keywatch_types     types\n\n  #---------------------------------------------------------------------------------------------------------\n  _XXX_initialized = false\n  _listen_to_key: ( name, type, listener ) =>\n    do =>\n      if name? then validate.keywatch_keyname name else name = ''\n      if type? then validate.keywatch_keytype type else type = ''\n      # debug '^90009^', name + \"\\x00\" + type\n      tag       = \"#{type}:#{name}\"\n      registry  = @_registry         ?= {}\n      listeners = registry[ tag ]    ?= []\n      listeners.push listener\n    #.......................................................................................................\n    # throw new Error '^493841^' unless type is 'down'\n    return null if _XXX_initialized\n    _XXX_initialized = true\n    debug '^2252^', \"binding keydown\"\n    #.......................................................................................................\n    µ.DOM.on document, 'keydown', ( event ) =>\n      name = event.key\n      type = 'down'\n      d       = freeze { name, type, event, }\n      for tag in [ \"#{type}:#{name}\", \"#{type}:\", \":#{event.key}\", \":\", ]\n        continue unless ( listeners = @_registry[ tag ] )?\n        listener d for listener in listeners\n      return null\n    return null ### NOTE may return a `remove_listener` method ITF ###\n\n  #---------------------------------------------------------------------------------------------------------\n  XXXXXXXXXXXX_foobar: =>\n    #.......................................................................................................\n    handle_kblike_event = ( event ) =>\n      modifier_state = @get_changed_kb_modifier_state event\n      if ( modifier_state != null )\n        µ.DOM.emit_custom_event 'µ_kb_modifier_changed', { detail: modifier_state, }\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    for event_name in @cfg.kblike_eventnames\n      µ.DOM.on document, event_name, handle_kblike_event\n    #.......................................................................................................\n    µ.DOM.on document, 'keydown', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      if ( event.key is 'CapsLock' ) then @_set_capslock_state not @_capslock_active\n      else                                @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    µ.DOM.on document, 'keyup', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      return null if event.key is 'CapsLock'\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    return null\n\n\n\n"
  ]
}