{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/kb.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\n'use strict'\nÂµ                         = require './main'\nlog                       = console.log\ndebug                     = console.debug\nfreeze                    = Object.freeze\n{ types\n  isa\n  validate\n  validate_optional }     = require './types'\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults                  =\n\n  #---------------------------------------------------------------------------------------------------------\n  latch:\n    dt:     350 # time in milliseconds between first and last key event to trigger latching\n\n  #---------------------------------------------------------------------------------------------------------\n  kblike_eventnames: [\n    # ### TAINT not all of these events are needed\n    'click',\n    # 'dblclick', # implied / preceded by `click` event\n    # 'drag', 'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart',\n    # 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover', 'mouseup',\n    # 'pointercancel',\n    'wheel',\n    'pointermove',\n    'pointerout',\n    'pointerover',\n    # 'pointerdown',\n    # 'pointerenter',\n    # 'pointerleave',\n    # 'pointerup',\n    ]\n\n  #---------------------------------------------------------------------------------------------------------\n  modifier_names: [\n    # ------------- Tier A: ubiquitous, unequivocal\n    'Alt',\n    'AltGraph',\n    'Control',\n    'Meta',\n    'Shift',\n    'CapsLock',\n    # ------------- Tier B: status doubtful\n    # 'Hyper',\n    # 'OS',\n    # 'Super',\n    # 'Symbol',\n    # ------------- Tier C: rare, not needed, or not sensed by JS\n    # 'Fn',\n    # 'FnLock',\n    # 'NumLock',\n    # 'ScrollLock',\n    # 'SymbolLock',\n    ]\n\n#-----------------------------------------------------------------------------------------------------------\n#\n#===========================================================================================================\nclass @_Kb\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg = { defaults..., cfg..., }\n    for modifier_name in @cfg.modifier_names\n      @_prv_modifiers[ modifier_name ] = null\n    freeze( @_prv_modifiers )\n    return null\n\n  _prv_modifiers: {}\n  _capslock_active: false\n\n  #---------------------------------------------------------------------------------------------------------\n  ### Get the last known keyboard modifier state. NOTE may be extended with `event` argument ITF. ###\n  # Âµ.DOM.get_kb_modifier_state = () => return { ...prv, }\n\n  #---------------------------------------------------------------------------------------------------------\n  get_changed_kb_modifier_state: () =>\n    ### Return keyboard modifier state if it has changed since the last call, or `null` if it hasn't changed. ###\n    # log( '^33988^', { event, } )\n    crt_modifiers     = { _type: event.type, }\n    has_changed       = false\n    for modifier_name in @cfg.modifier_names\n      state                           = event.getModifierState modifier_name\n      has_changed                     = has_changed or ( @_prv_modifiers[ modifier_name ] isnt state )\n      crt_modifiers[ modifier_name ]  = state\n    return @_prv_modifiers = freeze crt_modifiers if has_changed\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n# get_kb_modifier_state = ( event, value ) =>\n#   @_prv_modifiers = {}\n#   for ( modifier_name of @cfg.modifier_names ) {\n#     @_prv_modifiers[ modifier_name ] = null\n#   freeze( @_prv_modifiers )\n\n  #---------------------------------------------------------------------------------------------------------\n  _set_capslock_state: ( capslock_active ) =>\n    return null if capslock_active is @_capslock_active\n    @_capslock_active = capslock_active\n    Âµ.DOM.emit_custom_event 'Âµ_kb_capslock_changed', { detail: { CapsLock: capslock_active, }, }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # on_push: ( keynames, handler ) =>\n    # keynames  = [ keynames, ] unless isa.list keynames\n    # types     = [ types,    ] unless isa.list types\n    # validate.keywatch_keynames  keynames\n    # validate.keywatch_types     types\n\n  #---------------------------------------------------------------------------------------------------------\n  XXXXXXXXXXXX_foobar: =>\n    #.......................................................................................................\n    handle_kblike_event = ( event ) =>\n      modifier_state = @get_changed_kb_modifier_state event\n      if ( modifier_state != null )\n        Âµ.DOM.emit_custom_event 'Âµ_kb_modifier_changed', { detail: modifier_state, }\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    for eventname in @cfg.kblike_eventnames\n      Âµ.DOM.on document, eventname, handle_kblike_event\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keydown', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      if ( event.key is 'CapsLock' ) then @_set_capslock_state not @_capslock_active\n      else                                @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keyup', ( event ) =>\n      handle_kblike_event event ### !!!!!!!!!!!!!!!!!!!!!! ###\n      ### TAINT logic is questionable ###\n      return null if event.key is 'CapsLock'\n      @_set_capslock_state event.getModifierState 'CapsLock'\n      return null\n    return null\n\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n\nclass @Kb extends @_Kb\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _defaults: freeze {\n  #   state: freeze { down: false, up: false, toggle: false, latch: false, tlatch: false, }\n  #   }\n\n  #---------------------------------------------------------------------------------------------------------\n  _shreg:                 []\n  _latching_initialized:  false\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_latching_keyname: ->\n    return null unless ( Date.now() - ( @_shreg[ 0 ]?.t ? 0 ) ) < @cfg.latch.dt\n    return null unless @_shreg[ 0 ]?.dir   is 'down'\n    return null unless @_shreg[ 1 ]?.dir   is 'up'\n    return null unless @_shreg[ 2 ]?.dir   is 'down'\n    return null unless @_shreg[ 3 ]?.dir   is 'up'\n    return null unless @_shreg[ 0 ]?.name  is @_shreg[ 1 ]?.name is @_shreg[ 2 ]?.name is @_shreg[ 3 ]?.name\n    R               = @_shreg[ 3 ].name\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _initialize_latching: ->\n    return null if @_latching_initialized\n    @_latching_initialized = true\n    push = ( dir, event ) =>\n      name = event.key\n      @_shreg.push { dir, name, t: Date.now(), }\n      @_shreg.shift() while @_shreg.length > 4\n      return true\n    Âµ.DOM.on document, 'keydown', ( event ) => push 'down', event\n    Âµ.DOM.on document, 'keyup',   ( event ) => push 'up',   event\n    return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_key_push: ( keyname, handler ) ->\n    state     = false\n    behavior  = 'push'\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keydown', ( event ) =>\n      return true unless event.key is keyname\n      state = true\n      handler freeze { keyname, behavior, state, event, }\n      return true\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keyup', ( event ) =>\n      return true unless event.key is keyname\n      state = false\n      handler freeze { keyname, behavior, state, event, }\n      return true\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_key_toggle: ( keyname, handler ) ->\n    state     = false\n    behavior  = 'toggle'\n    skip_next = false\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keydown', ( event ) =>\n      return true unless event.key is keyname\n      return true if state\n      state           = true\n      skip_next = true\n      # debug '^_listen_to_key@223^', 'keydown', { keyname, behavior, entry, }\n      handler freeze { keyname, behavior, state, event, }\n      return true\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keyup', ( event ) =>\n      return true unless event.key is keyname\n      return true if not state\n      if skip_next then skip_next = false\n      else              state     = false\n      # debug '^_listen_to_key@223^', 'toggle/keyup', { keyname, behavior, entry, }\n      handler freeze { keyname, behavior, state, event, }\n      return true\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_key_latch: ( keyname, handler ) ->\n    @_initialize_latching()\n    state     = false\n    behavior  = 'latch'\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keyup', ( event ) =>\n      if keyname is @_get_latching_keyname()\n        state = not state\n        handler freeze { keyname, behavior, state, event, }\n      return true\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_key_tlatch: ( keyname, handler ) ->\n    state       = false\n    behavior    = 'tlatch'\n    is_latched  = false\n    #.......................................................................................................\n    @_listen_to_key keyname, 'latch', ( d ) =>\n      debug '^_listen_to_key_tlatch', d\n      is_latched = d.state\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keydown', ( event ) =>\n      return true unless event.key is keyname\n      state = not is_latched\n      handler freeze { keyname, behavior, state, event, }\n      return true\n    #.......................................................................................................\n    Âµ.DOM.on document, 'keyup',   ( event ) =>\n      return true unless event.key is keyname\n      state = is_latched\n      handler freeze { keyname, behavior, state, event, }\n      return true\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _listen_to_key: ( keyname, behavior, handler ) =>\n    keyname = ' ' if keyname is 'Space'\n    validate.keywatch_keyname keyname\n    validate.keywatch_keytype behavior\n    #.......................................................................................................\n    switch behavior\n      when 'push'     then @_listen_to_key_push   keyname, handler\n      when 'toggle'   then @_listen_to_key_toggle keyname, handler\n      when 'latch'    then @_listen_to_key_latch  keyname, handler\n      when 'tlatch'   then @_listen_to_key_tlatch keyname, handler\n    #.......................................................................................................\n    return null ### NOTE may return a `remove_listener` method ITF ###\n\n\n"
  ]
}